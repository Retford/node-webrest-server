
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `todo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model todo
 * 
 */
export type todoModel = runtime.Types.Result.DefaultSelection<Prisma.$todoPayload>

export type AggregateTodo = {
  _count: TodoCountAggregateOutputType | null
  _avg: TodoAvgAggregateOutputType | null
  _sum: TodoSumAggregateOutputType | null
  _min: TodoMinAggregateOutputType | null
  _max: TodoMaxAggregateOutputType | null
}

export type TodoAvgAggregateOutputType = {
  id: number | null
}

export type TodoSumAggregateOutputType = {
  id: number | null
}

export type TodoMinAggregateOutputType = {
  id: number | null
  text: string | null
  completedAt: Date | null
}

export type TodoMaxAggregateOutputType = {
  id: number | null
  text: string | null
  completedAt: Date | null
}

export type TodoCountAggregateOutputType = {
  id: number
  text: number
  completedAt: number
  _all: number
}


export type TodoAvgAggregateInputType = {
  id?: true
}

export type TodoSumAggregateInputType = {
  id?: true
}

export type TodoMinAggregateInputType = {
  id?: true
  text?: true
  completedAt?: true
}

export type TodoMaxAggregateInputType = {
  id?: true
  text?: true
  completedAt?: true
}

export type TodoCountAggregateInputType = {
  id?: true
  text?: true
  completedAt?: true
  _all?: true
}

export type TodoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which todo to aggregate.
   */
  where?: Prisma.todoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of todos to fetch.
   */
  orderBy?: Prisma.todoOrderByWithRelationInput | Prisma.todoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.todoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` todos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` todos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned todos
  **/
  _count?: true | TodoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TodoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TodoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TodoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TodoMaxAggregateInputType
}

export type GetTodoAggregateType<T extends TodoAggregateArgs> = {
      [P in keyof T & keyof AggregateTodo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTodo[P]>
    : Prisma.GetScalarType<T[P], AggregateTodo[P]>
}




export type todoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.todoWhereInput
  orderBy?: Prisma.todoOrderByWithAggregationInput | Prisma.todoOrderByWithAggregationInput[]
  by: Prisma.TodoScalarFieldEnum[] | Prisma.TodoScalarFieldEnum
  having?: Prisma.todoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TodoCountAggregateInputType | true
  _avg?: TodoAvgAggregateInputType
  _sum?: TodoSumAggregateInputType
  _min?: TodoMinAggregateInputType
  _max?: TodoMaxAggregateInputType
}

export type TodoGroupByOutputType = {
  id: number
  text: string
  completedAt: Date | null
  _count: TodoCountAggregateOutputType | null
  _avg: TodoAvgAggregateOutputType | null
  _sum: TodoSumAggregateOutputType | null
  _min: TodoMinAggregateOutputType | null
  _max: TodoMaxAggregateOutputType | null
}

type GetTodoGroupByPayload<T extends todoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TodoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TodoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TodoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TodoGroupByOutputType[P]>
      }
    >
  >



export type todoWhereInput = {
  AND?: Prisma.todoWhereInput | Prisma.todoWhereInput[]
  OR?: Prisma.todoWhereInput[]
  NOT?: Prisma.todoWhereInput | Prisma.todoWhereInput[]
  id?: Prisma.IntFilter<"todo"> | number
  text?: Prisma.StringFilter<"todo"> | string
  completedAt?: Prisma.DateTimeNullableFilter<"todo"> | Date | string | null
}

export type todoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type todoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.todoWhereInput | Prisma.todoWhereInput[]
  OR?: Prisma.todoWhereInput[]
  NOT?: Prisma.todoWhereInput | Prisma.todoWhereInput[]
  text?: Prisma.StringFilter<"todo"> | string
  completedAt?: Prisma.DateTimeNullableFilter<"todo"> | Date | string | null
}, "id">

export type todoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.todoCountOrderByAggregateInput
  _avg?: Prisma.todoAvgOrderByAggregateInput
  _max?: Prisma.todoMaxOrderByAggregateInput
  _min?: Prisma.todoMinOrderByAggregateInput
  _sum?: Prisma.todoSumOrderByAggregateInput
}

export type todoScalarWhereWithAggregatesInput = {
  AND?: Prisma.todoScalarWhereWithAggregatesInput | Prisma.todoScalarWhereWithAggregatesInput[]
  OR?: Prisma.todoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.todoScalarWhereWithAggregatesInput | Prisma.todoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"todo"> | number
  text?: Prisma.StringWithAggregatesFilter<"todo"> | string
  completedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"todo"> | Date | string | null
}

export type todoCreateInput = {
  text: string
  completedAt?: Date | string | null
}

export type todoUncheckedCreateInput = {
  id?: number
  text: string
  completedAt?: Date | string | null
}

export type todoUpdateInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type todoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type todoCreateManyInput = {
  id?: number
  text: string
  completedAt?: Date | string | null
}

export type todoUpdateManyMutationInput = {
  text?: Prisma.StringFieldUpdateOperationsInput | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type todoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  text?: Prisma.StringFieldUpdateOperationsInput | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type todoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type todoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type todoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type todoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type todoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type todoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["todo"]>

export type todoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["todo"]>

export type todoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["todo"]>

export type todoSelectScalar = {
  id?: boolean
  text?: boolean
  completedAt?: boolean
}

export type todoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text" | "completedAt", ExtArgs["result"]["todo"]>

export type $todoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "todo"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    text: string
    completedAt: Date | null
  }, ExtArgs["result"]["todo"]>
  composites: {}
}

export type todoGetPayload<S extends boolean | null | undefined | todoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$todoPayload, S>

export type todoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<todoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TodoCountAggregateInputType | true
  }

export interface todoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['todo'], meta: { name: 'todo' } }
  /**
   * Find zero or one Todo that matches the filter.
   * @param {todoFindUniqueArgs} args - Arguments to find a Todo
   * @example
   * // Get one Todo
   * const todo = await prisma.todo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends todoFindUniqueArgs>(args: Prisma.SelectSubset<T, todoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Todo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {todoFindUniqueOrThrowArgs} args - Arguments to find a Todo
   * @example
   * // Get one Todo
   * const todo = await prisma.todo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends todoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, todoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Todo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {todoFindFirstArgs} args - Arguments to find a Todo
   * @example
   * // Get one Todo
   * const todo = await prisma.todo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends todoFindFirstArgs>(args?: Prisma.SelectSubset<T, todoFindFirstArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Todo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {todoFindFirstOrThrowArgs} args - Arguments to find a Todo
   * @example
   * // Get one Todo
   * const todo = await prisma.todo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends todoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, todoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Todos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {todoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Todos
   * const todos = await prisma.todo.findMany()
   * 
   * // Get first 10 Todos
   * const todos = await prisma.todo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const todoWithIdOnly = await prisma.todo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends todoFindManyArgs>(args?: Prisma.SelectSubset<T, todoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Todo.
   * @param {todoCreateArgs} args - Arguments to create a Todo.
   * @example
   * // Create one Todo
   * const Todo = await prisma.todo.create({
   *   data: {
   *     // ... data to create a Todo
   *   }
   * })
   * 
   */
  create<T extends todoCreateArgs>(args: Prisma.SelectSubset<T, todoCreateArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Todos.
   * @param {todoCreateManyArgs} args - Arguments to create many Todos.
   * @example
   * // Create many Todos
   * const todo = await prisma.todo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends todoCreateManyArgs>(args?: Prisma.SelectSubset<T, todoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Todos and returns the data saved in the database.
   * @param {todoCreateManyAndReturnArgs} args - Arguments to create many Todos.
   * @example
   * // Create many Todos
   * const todo = await prisma.todo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Todos and only return the `id`
   * const todoWithIdOnly = await prisma.todo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends todoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, todoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Todo.
   * @param {todoDeleteArgs} args - Arguments to delete one Todo.
   * @example
   * // Delete one Todo
   * const Todo = await prisma.todo.delete({
   *   where: {
   *     // ... filter to delete one Todo
   *   }
   * })
   * 
   */
  delete<T extends todoDeleteArgs>(args: Prisma.SelectSubset<T, todoDeleteArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Todo.
   * @param {todoUpdateArgs} args - Arguments to update one Todo.
   * @example
   * // Update one Todo
   * const todo = await prisma.todo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends todoUpdateArgs>(args: Prisma.SelectSubset<T, todoUpdateArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Todos.
   * @param {todoDeleteManyArgs} args - Arguments to filter Todos to delete.
   * @example
   * // Delete a few Todos
   * const { count } = await prisma.todo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends todoDeleteManyArgs>(args?: Prisma.SelectSubset<T, todoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Todos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {todoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Todos
   * const todo = await prisma.todo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends todoUpdateManyArgs>(args: Prisma.SelectSubset<T, todoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Todos and returns the data updated in the database.
   * @param {todoUpdateManyAndReturnArgs} args - Arguments to update many Todos.
   * @example
   * // Update many Todos
   * const todo = await prisma.todo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Todos and only return the `id`
   * const todoWithIdOnly = await prisma.todo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends todoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, todoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Todo.
   * @param {todoUpsertArgs} args - Arguments to update or create a Todo.
   * @example
   * // Update or create a Todo
   * const todo = await prisma.todo.upsert({
   *   create: {
   *     // ... data to create a Todo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Todo we want to update
   *   }
   * })
   */
  upsert<T extends todoUpsertArgs>(args: Prisma.SelectSubset<T, todoUpsertArgs<ExtArgs>>): Prisma.Prisma__todoClient<runtime.Types.Result.GetResult<Prisma.$todoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Todos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {todoCountArgs} args - Arguments to filter Todos to count.
   * @example
   * // Count the number of Todos
   * const count = await prisma.todo.count({
   *   where: {
   *     // ... the filter for the Todos we want to count
   *   }
   * })
  **/
  count<T extends todoCountArgs>(
    args?: Prisma.Subset<T, todoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TodoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Todo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TodoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TodoAggregateArgs>(args: Prisma.Subset<T, TodoAggregateArgs>): Prisma.PrismaPromise<GetTodoAggregateType<T>>

  /**
   * Group by Todo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {todoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends todoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: todoGroupByArgs['orderBy'] }
      : { orderBy?: todoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, todoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the todo model
 */
readonly fields: todoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for todo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__todoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the todo model
 */
export interface todoFieldRefs {
  readonly id: Prisma.FieldRef<"todo", 'Int'>
  readonly text: Prisma.FieldRef<"todo", 'String'>
  readonly completedAt: Prisma.FieldRef<"todo", 'DateTime'>
}
    

// Custom InputTypes
/**
 * todo findUnique
 */
export type todoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * Filter, which todo to fetch.
   */
  where: Prisma.todoWhereUniqueInput
}

/**
 * todo findUniqueOrThrow
 */
export type todoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * Filter, which todo to fetch.
   */
  where: Prisma.todoWhereUniqueInput
}

/**
 * todo findFirst
 */
export type todoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * Filter, which todo to fetch.
   */
  where?: Prisma.todoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of todos to fetch.
   */
  orderBy?: Prisma.todoOrderByWithRelationInput | Prisma.todoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for todos.
   */
  cursor?: Prisma.todoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` todos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` todos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of todos.
   */
  distinct?: Prisma.TodoScalarFieldEnum | Prisma.TodoScalarFieldEnum[]
}

/**
 * todo findFirstOrThrow
 */
export type todoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * Filter, which todo to fetch.
   */
  where?: Prisma.todoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of todos to fetch.
   */
  orderBy?: Prisma.todoOrderByWithRelationInput | Prisma.todoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for todos.
   */
  cursor?: Prisma.todoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` todos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` todos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of todos.
   */
  distinct?: Prisma.TodoScalarFieldEnum | Prisma.TodoScalarFieldEnum[]
}

/**
 * todo findMany
 */
export type todoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * Filter, which todos to fetch.
   */
  where?: Prisma.todoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of todos to fetch.
   */
  orderBy?: Prisma.todoOrderByWithRelationInput | Prisma.todoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing todos.
   */
  cursor?: Prisma.todoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` todos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` todos.
   */
  skip?: number
  distinct?: Prisma.TodoScalarFieldEnum | Prisma.TodoScalarFieldEnum[]
}

/**
 * todo create
 */
export type todoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * The data needed to create a todo.
   */
  data: Prisma.XOR<Prisma.todoCreateInput, Prisma.todoUncheckedCreateInput>
}

/**
 * todo createMany
 */
export type todoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many todos.
   */
  data: Prisma.todoCreateManyInput | Prisma.todoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * todo createManyAndReturn
 */
export type todoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * The data used to create many todos.
   */
  data: Prisma.todoCreateManyInput | Prisma.todoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * todo update
 */
export type todoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * The data needed to update a todo.
   */
  data: Prisma.XOR<Prisma.todoUpdateInput, Prisma.todoUncheckedUpdateInput>
  /**
   * Choose, which todo to update.
   */
  where: Prisma.todoWhereUniqueInput
}

/**
 * todo updateMany
 */
export type todoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update todos.
   */
  data: Prisma.XOR<Prisma.todoUpdateManyMutationInput, Prisma.todoUncheckedUpdateManyInput>
  /**
   * Filter which todos to update
   */
  where?: Prisma.todoWhereInput
  /**
   * Limit how many todos to update.
   */
  limit?: number
}

/**
 * todo updateManyAndReturn
 */
export type todoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * The data used to update todos.
   */
  data: Prisma.XOR<Prisma.todoUpdateManyMutationInput, Prisma.todoUncheckedUpdateManyInput>
  /**
   * Filter which todos to update
   */
  where?: Prisma.todoWhereInput
  /**
   * Limit how many todos to update.
   */
  limit?: number
}

/**
 * todo upsert
 */
export type todoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * The filter to search for the todo to update in case it exists.
   */
  where: Prisma.todoWhereUniqueInput
  /**
   * In case the todo found by the `where` argument doesn't exist, create a new todo with this data.
   */
  create: Prisma.XOR<Prisma.todoCreateInput, Prisma.todoUncheckedCreateInput>
  /**
   * In case the todo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.todoUpdateInput, Prisma.todoUncheckedUpdateInput>
}

/**
 * todo delete
 */
export type todoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
  /**
   * Filter which todo to delete.
   */
  where: Prisma.todoWhereUniqueInput
}

/**
 * todo deleteMany
 */
export type todoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which todos to delete
   */
  where?: Prisma.todoWhereInput
  /**
   * Limit how many todos to delete.
   */
  limit?: number
}

/**
 * todo without action
 */
export type todoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the todo
   */
  select?: Prisma.todoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the todo
   */
  omit?: Prisma.todoOmit<ExtArgs> | null
}
